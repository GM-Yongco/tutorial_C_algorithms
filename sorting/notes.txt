==================================================
 MAIN
==================================================

sorting algorithms covered
	review:
		bubble
		selection
		insertion
	new:
		shell
		heap
		quick
		merge
		counting
		bucket
		radix
		strand
		gnome
		tournament
		comb

==================================================
 TEMPLATE
==================================================

creator				: 
when				: 
time complexity		: 
	best			: 
	average			: 
	worst			: 
space complexity	: 
in_place			: 
stable				: 
notes
	:

==================================================
 BUCKET SORT
==================================================
this is first cuz i needed to present this

steps
	go through one loop to insert the values into a buckets with ranges in order
		usually closed hash table
		ex 1: 
			you could insert to the hash table a list of decimals 
			the hash value based on their first decimal digit
			and the hash table size would be 10 starting from 0-9
	we then sort each bucket
		GeeksGorGeeks uses insertion sort
	we then assume the values are sorted and insert each value in order in the bucket and by order of buckets
	
lil bit by jules:
	if you know the distribution of the values you can make more efficient bucket
		i assume bucket sort will perform worse with imbalanced buckets
			because insertion sort within a bucket scales time complexity exponentially
			while the number of buckets scales the time complexity linearly
		we can make the range distribution of the buckets/hash value 
			be based on the area under the distribution curve
			giving better chances of a balanced bucket distribution

==================================================
 TOURNAMENT SORT
==================================================

creator				: cant attribute
when				: 
time complexity:
	always			: O(n log(n)) aka log-linear time complexity
in_place			: false
space complexity	: O(n) additional space for the tournament tree structure
stable				: false
notes
	: winner/looser tree aka max/min tree
	: 

==================================================
 BUBBLE SORT
==================================================

creator				: Edware Harry Friend
when				: 
time complexity		: O(n^2)
	best			:
	average			: O(n^2)
	worst			: O(n^2)
in_place			: yes
space complexity	: O(1)
stable				: yes
notes
	: Edware Harry Friend, first known person to describe the algo in a math paper
	: Kenneth E. Iverson coined is current term

==================================================
 COMB SORT
==================================================

creator				: WÅ‚odzimierz Dobosiewicz and Artur Borowy
when				: 1980
time complexity		: O(n^2)
	best			:
	average			: O(n^2)  
	worst			: O(n log(n))
in_place			: yes
space complexity	: O(1)
stable				: no
notes
	: is basically gapped bubble sort
	: has fewwer comparisons than bubble sort

==================================================
 SHELL
==================================================

creator				: Donald shel
when				: 1952
time complexity		:
	best			: O(n log(n))
	average			: O(n^(5/4))
	worst			: O(n^2)
in_place			: yes
space complexity	: O(1)
stable				: yes
notes
	: basically gapped selection sort

==================================================
 INSERTION
==================================================

creator				: Donald Knuth's
when				: 1968
time complexity		: O(n^2)
	best			:
	average			:
	worst			:
in_place			: yes
space complexity	: O(1)
stable				: yes
notes
	: from Donald Knuth's book "The Art of Computer Programming", titled "Fundamental Algorithms".

==================================================
 SELCTION
==================================================

creator				:
when				: 
time complexity		:
	best			:
	average			: 
	worst			:
in_place			: 
space complexity	: 
stable				: 	
notes
	:

==================================================
==================================================
==================================================
 QUICK
==================================================

creator				: Tony Hoare
when				: 1959 but published at 1961
time complexity		: 
	best			: 
	average			: O(n log(n))
	worst			: O(n^2)
space complexity	: O(log(n)) - O(n) : only regarding the stack recursion memory tho
in_place			: true
stable				: false
notes
	: lomuto is the weird version
	: cassmates people prefer hoare for mental complexity
	: idk who dafq is lomuto

==================================================
 Merge
==================================================

creator				: Jhon Von Nueman
when				: 1945
time complexity		: 
	best			: 
	average			: O(n log(n))
	worst			: 
space complexity	: O(n) : because of auxiliary array
in_place			: false
stable				: true
notes
	: total memory used for auxiliary arrays would be n log n on average if we didnt free the aux arrays
	: it would also be n log n if the recursion all happens at the same time

==================================================
 STRAND
==================================================

creator				: 
when				: 1997
time complexity		: 
	best			: 
	average			: O(n^2 /2)
	worst			: O(n^2)
space complexity	: O(n) : because of auxiliary array
in_place			: false
stable				: true
notes
	: total memory used for auxiliary arrays would be n log n on average if we didnt free the aux arrays
	: it would also be n log n if the recursion all happens at the same time
==================================================
 COUNTING	
==================================================
==================================================
 Radix
==================================================


==================================================
 GNOME
==================================================
creator				: Hamid Sarbazi-Azad
when				: 
time complexity		: 
	best			: 
	average			: O(n^2)
	worst			: O(n^2)
space complexity	: O(1)
in_place			: true
stable				: true
notes
	:
==================================================
 BUCKET
==================================================